// We must identify the kernel (entry-point) functions.
#pragma kernel kernel_advance_swarmer_states

#include "swarm_shader_types.cginc"
#include "swarm_shader_utilities.cginc"

uniform int u_swarmer_count;
uniform StructuredBuffer<s_swarmer_state> u_readable_swarmers;
uniform RWStructuredBuffer<s_swarmer_state> u_out_next_swarmers;

uniform int u_forcefield_count;
uniform StructuredBuffer<s_forcefield_state> u_forcefields;

uniform float u_delta_time;

static const float k_swarmer_model_scale= 0.1f;

[numthreads(64, 1, 1)]
void kernel_advance_swarmer_states(
	uint3 thread_id : SV_DispatchThreadID)
{
	int swarmer_index = thread_id.x;

	if (swarmer_index < u_swarmer_count)
	{
		s_swarmer_state new_swarmer_state = u_readable_swarmers[swarmer_index];

		float3 summedAcceleration = float3(0.0f, 0.0f, 0.0f);

		for (int forcefield_index = 0; forcefield_index < u_forcefield_count; ++forcefield_index)
		{
			// NOTE: This compute-shader treats *all* forcefields as being spherical. It's really just old test code at this point.
			float3 forcefield_position =
				mul(u_forcefields[forcefield_index].forcefield_to_simulation_matrix, float4(0, 0, 0, 1)).xyz;

			float3 swarmer_to_forcefield =
				(forcefield_position - u_readable_swarmers[swarmer_index].position);

			float attraction_scalar = (-1.0f * u_forcefields[forcefield_index].force_scalar);

			// From "f = (gravity_const * mass1 * mass2) / distance^2", but
			// where "attraction_scalar" is equal to "gravity_const * mass1" and "mass2 = 1kg".
			float force = (
				attraction_scalar /
				dot(swarmer_to_forcefield, swarmer_to_forcefield));

			// HAX!
			force =
				lerp(0.0f, 0.1f, (5.0f * length(swarmer_to_forcefield))) *
				attraction_scalar;

			summedAcceleration += (force * normalize(swarmer_to_forcefield));
		}

		new_swarmer_state.velocity += (u_delta_time * summedAcceleration);

		// HAX!
		new_swarmer_state.velocity *= lerp(1.0f, 0.9f, smoothstep(0.5f, 1.0f, length(new_swarmer_state.velocity)));

		new_swarmer_state.position +=
			(u_delta_time * new_swarmer_state.velocity);

		new_swarmer_state.local_up =
			any(summedAcceleration) ?
			normalize(summedAcceleration) :
			float3(0.0f, 1.0f, 0.0f);

		new_swarmer_state.cached_model_center_segment_to_swarm_matrix =
			build_swarmer_model_to_swarm_matrix(
				new_swarmer_state.position,
				new_swarmer_state.velocity,
				new_swarmer_state.local_up,
				k_swarmer_model_scale);

		new_swarmer_state.cached_model_left_segment_to_swarm_matrix = new_swarmer_state.cached_model_center_segment_to_swarm_matrix;
		new_swarmer_state.cached_model_right_segment_to_swarm_matrix = new_swarmer_state.cached_model_center_segment_to_swarm_matrix;

		u_out_next_swarmers[swarmer_index] = new_swarmer_state;
	}
}
