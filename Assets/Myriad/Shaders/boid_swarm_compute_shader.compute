// We must identify the kernal (entry-point) functions.
#pragma kernel compute_shader_main

#include "swarm_shader_types.cginc"
#include "swarm_shader_utilities.cginc"

uniform RWStructuredBuffer<s_swarmer_state> u_inout_swarmers;
uniform int u_swarmer_count;

uniform StructuredBuffer<s_forcefield_state> u_forcefields;
uniform int u_forcefield_count;

uniform float u_delta_time;

static const float k_ideal_velocity_blending_rate = 10.0f;

static const float k_swarmer_speed_min = 0.1f;
static const float k_swarmer_speed_idle = 0.5f;
static const float k_swarmer_speed_max = 1.0f;

static const float k_neighborhood_radius = 0.3f;

static const float k_neighbor_attraction_scalar = 0.1f;
static const float k_neighbor_collision_avoidance_scalar = 10.0f;
static const float k_neighbor_alignment_scalar = 0.1f;

static const float k_swarmer_model_scale= 0.04f;

float3 build_forcefields_impulse(
	uint swarmer_index)
{
	float3 result = (float3)0.0f;

	for (int forcefield_index = 0; 
		forcefield_index < u_forcefield_count; 
		++forcefield_index)
	{
		s_forcefield_state forcefield = u_forcefields[forcefield_index];

		float3 swarmer_in_forcefield_space = mul(
			forcefield.simulation_to_forcefield_matrix, 
			float4(u_inout_swarmers[swarmer_index].position, 1.0f)).xyz;

		float distance_to_field_core;
		float3 field_force_direction;

		switch (forcefield.forcefield_type)
		{
			case k_forcefield_type_global:
				distance_to_field_core = 0.0f;
				field_force_direction = float3(0.0f, 1.0f, 0.0f);
				break;

			case k_forcefield_type_plane:
				distance_to_field_core = max(0.0f, swarmer_in_forcefield_space.y);
				field_force_direction = float3(0.0f, 1.0f, 0.0f);
				break;

			case k_forcefield_type_sphere:
				distance_to_field_core = length(swarmer_in_forcefield_space);
				field_force_direction = (swarmer_in_forcefield_space / distance_to_field_core);
				break;

			case k_forcefield_type_thrust_capsule:
				distance_to_field_core =
					distance(
						float3(0.0f, clamp(swarmer_in_forcefield_space.y, 0.0f, forcefield.forcefield_length), 0.0f),
						swarmer_in_forcefield_space);
				field_force_direction = float3(0.0f, 1.0f, 0.0f);
				break;

			default:
				distance_to_field_core = 0.0f;
				field_force_direction = float3(0.0f, 0.0f, 0.0f);
				break;
		}

		field_force_direction = 
			mul(
				forcefield.forcefield_to_simulation_matrix, 
				float4(field_force_direction, 0.0f)).xyz;

		float effect_fraction = (
			1.0f -
			smoothstep(
				forcefield.falloff_inner_radius,
				forcefield.falloff_outer_radius,
				distance_to_field_core));

		result += (
			(effect_fraction * forcefield.force_scalar) * 
			field_force_direction);
	}

	return result;
}

float3 build_flocking_impulse(
	uint swarmer_index)
{
	float neighbor_count = 0.0001f;
	float3 attraction_summation = (float3)0.0f;
	float3 collision_avoidance_summation = (float3)0.0f;
	float3 alignment_summation = (float3)0.0f;

	// Factor in the other boids.
	for (int neighbor_index = 0; neighbor_index < u_swarmer_count; ++neighbor_index)
	{
		float3 swarmer_to_neighbor =
			(u_inout_swarmers[neighbor_index].position - u_inout_swarmers[swarmer_index].position);

		float distance = max(0.001, length(swarmer_to_neighbor)); // Minimum-distance avoids a potential divide-by-zero.

		float3 swarmer_to_neighbor_direction = (swarmer_to_neighbor / distance);

		float case_is_neighbor = (
			(neighbor_index != (int)swarmer_index) * // Ignore comparisons against ourselves (without disrupting branching).
			(distance < k_neighborhood_radius));

		float distance_fraction = saturate(distance / k_neighborhood_radius);
		float proximity_fraction = (1.0f - distance_fraction);

		neighbor_count += case_is_neighbor;

		attraction_summation += (
			case_is_neighbor *
			swarmer_to_neighbor_direction);

		collision_avoidance_summation += (
			case_is_neighbor *
			(proximity_fraction * proximity_fraction) *
			(-1 * swarmer_to_neighbor_direction));

		alignment_summation += (
			case_is_neighbor *
			u_inout_swarmers[neighbor_index].velocity);
	}

	float3 flocking_summation = (
		(k_neighbor_attraction_scalar * attraction_summation) +
		(k_neighbor_collision_avoidance_scalar * collision_avoidance_summation) +
		(k_neighbor_alignment_scalar * alignment_summation));

	return (flocking_summation / neighbor_count);
}

[numthreads(64, 1, 1)]
void compute_shader_main(
	uint3 thread_id : SV_DispatchThreadID)
{
	// Default to idling forwards.
	float3 idealVelocity = 
		(k_swarmer_speed_idle * normalize(u_inout_swarmers[thread_id.x].velocity));

	idealVelocity += build_forcefields_impulse(thread_id.x);

	idealVelocity += build_flocking_impulse(thread_id.x);

	u_inout_swarmers[thread_id.x].velocity = 
		lerp(
			u_inout_swarmers[thread_id.x].velocity,
			idealVelocity,
			saturate(u_delta_time * k_ideal_velocity_blending_rate));
	
	u_inout_swarmers[thread_id.x].position += 
		(u_delta_time * u_inout_swarmers[thread_id.x].velocity);
	
	u_inout_swarmers[thread_id.x].local_up = float3(0.0f, 1.0f, 0.0f); // TODO: Animate this as the boid turns left/right.

	u_inout_swarmers[thread_id.x].cached_model_to_swarm_matrix =
		build_swarmer_model_to_swarm_matrix(
			u_inout_swarmers[thread_id.x].position,
			u_inout_swarmers[thread_id.x].velocity,
			u_inout_swarmers[thread_id.x].local_up,
			k_swarmer_model_scale);
}
